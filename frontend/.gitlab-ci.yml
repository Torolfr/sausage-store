variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - notify
  - test
  - release
  - deploy

cache:
  paths:
    - frontend/dist/frontend
    - .npm/

build-frontend-code-job:
  stage: build
  only:
    changes:
      - frontend/*/**
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend

sonarqube-frontend-sast:
  stage: test
  needs:
    - build-frontend-code-job
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONT}
  allow_failure: true

telegram-notification-frontend:
  stage: notify
  needs:
    - build-frontend-code-job
  variables:
    MESSAGE: "Sergey Danilov built apps frontend. ${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_BRANCH}/download?job=build-frontend-code-job"
  only:
    changes:
      - frontend/*/**
    variables:
      - "$CI_COMMIT_MESSAGE =~ /send notification/"
  script:
    - >
      curl -X POST -H "Content-type: application/json"
      --data "{\"chat_id\": \"${TELEGRAM_TO}\", \"text\": \"${MESSAGE}\"}"
      https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage

upload-frontend-release:
  stage: release
  only:
    changes:
      - frontend/**/*
  needs:
    - build-frontend-code-job
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file sausage-store-${VERSION}.tar.gz
      ${NEXUS_REPO_URL}/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz

# frontend-deploy:
#   stage: deploy
#   environment:
#     name: frontend/${CI_COMMIT_REF_SLUG}
#     on_stop: delete-frontend-deploy
#   before_script:
#     - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts

#   script:
#     - scp ./frontend/frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/frontend.service
#     - >
#       ssh ${DEV_USER}@${DEV_HOST}
#       "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}";
#       export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
#       export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}";
#       export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
#       setsid /bin/bash -s " < ./frontend/deploy.sh

# delete-frontend-deploy:
#   stage: deploy
#   when: manual
#   environment:
#     name: frontend/${CI_COMMIT_REF_SLUG}
#     action: stop
#   before_script:
#     - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - ssh ${DEV_USER}@${DEV_HOST} "setsid /bin/bash -s " < ./frontend/stop.sh

build-frontend-docker-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

release-frontend-docker:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA latest

deploy-frontend-docker:
  stage: deploy
  environment:
    name: frontend/${CI_COMMIT_REF_SLUG}
    on_stop: delete-deploy-frontend-docker
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
    - scp ./frontend/default.conf ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/${CI_PROJECT_DIR}/frontend/default.conf
    - envsubst < ./frontend/frontend_deploy_docker.sh|ssh ${DEV_USER}@${DEV_HOST}

delete-deploy-frontend-docker:
  stage: deploy
  when: manual
  environment:
    name: frontend/${CI_COMMIT_REF_SLUG}
    action: stop
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "setsid /bin/bash -s " < ./frontend/frontend_stop_docker.sh
