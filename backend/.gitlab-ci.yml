variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build
  - notify
  - test
  - release
  - deploy

# include:
#   - template: Security/SAST.gitlab-ci.yml

cache:
  paths:
    - ${MAVEN_REPO_PATH}

# build-backend-code-job:
#   stage: build
#   only:
#     changes:
#       - backend/*/**
#   script:
#     - cd backend
#     - >
#       mvn package -Dmaven.repo.local=${MAVEN_REPO_PATH}
#       -Dversion.application=${VERSION}
#       -Dspring.flyway.enabled=false
#       -DskipTests=true

# spotbugs-sast:
#   stage: test
#   needs:
#     - build-backend-code-job
#   variables:
#     COMPILE: "false"
#     SAST_JAVA_VERSION: 11
#     MAVEN_REPO_PATH: ${MAVEN_REPO_PATH}

# sonarqube-backend-sast:
#   stage: test
#   needs:
#     - build-backend-code-job
#   image: maven:3.8-openjdk-16
#   script:
#     - cd backend
#     - >
#       mvn verify sonar:sonar
#       -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${SONAR_LOGIN_BACK}
#       -Dspring.flyway.enabled=false
#       -DskipTests=true
#   allow_failure: true

telegram-notification-backend:
  stage: notify
  needs:
    - build-backend-code-job
  variables:
    MESSAGE: "Sergey Danilov built apps apps backend. ${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_BRANCH}/download?job=build-backend-code-job"
  only:
    changes:
      - backend/*/**
    variables:
      - "$CI_COMMIT_MESSAGE =~ /send notification/"
  script:
    - >
      curl -X POST -H "Content-type: application/json"
      --data "{\"chat_id\": \"${TELEGRAM_TO}\", \"text\": \"${MESSAGE}\"}"
      https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage

# upload-backend-release:
#   stage: release
#   only:
#     changes:
#       - backend/**/*
#   needs:
#     - build-backend-code-job
#   script:
#     - cd backend
#     - >
#       mvn deploy -DskipTests
#       -Dmaven.repo.local=${MAVEN_REPO_PATH}
#       -s settings.xml -Dversion.application=${VERSION}

# backend-deploy:
#   stage: deploy
#   environment:
#     name: backend/${CI_COMMIT_REF_SLUG}
#     on_stop: delete-backend-deploy
#   before_script:
#     - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts

#   script:
#     - scp ./backend/backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/backend.service
#     - >
#       ssh ${DEV_USER}@${DEV_HOST}
#       "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}";
#       export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
#       export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}";
#       export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
#       setsid /bin/bash -s " < ./backend/deploy.sh

# delete-backend-deploy:
#   stage: deploy
#   when: manual
#   environment:
#     name: backend/${CI_COMMIT_REF_SLUG}
#     action: stop
#   before_script:
#     - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - ssh ${DEV_USER}@${DEV_HOST} "setsid /bin/bash -s " < ./backend/stop.sh

build-backend-docker-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:${CI_COMMIT_SHA}"
      --build-arg VERSION=${VERSION}
      --cache=true

release-backend-docker:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  before_script:
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - crane tag ${CI_REGISTRY_IMAGE}/sausage-backend:${CI_COMMIT_SHA} latest

deploy-backend-docker:
  stage: deploy
  environment:
    name: backend/${CI_COMMIT_REF_SLUG}
    on_stop: delete-deploy-backend-docker
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install gettext openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - envsubst < ./backend/backend_deploy_docker.sh|ssh ${DEV_USER}@${DEV_HOST}

delete-deploy-backend-docker:
  stage: deploy
  when: manual
  environment:
    name: backend/${CI_COMMIT_REF_SLUG}
    action: stop
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "setsid /bin/bash -s " < ./backend/backend_stop_docker.sh
